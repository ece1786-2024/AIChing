import io
import os
import re

import autogen
import hexagram_generator
import pandas as pd
import rag

llm_config = {
    "model": "gpt-4o",
    "api_key": os.environ["OPENAI_API_KEY"],
}


def termination_msg(x):
    return isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()


def fortune_telling(
    question,
    first_index,
    day_stem,
    day_branch,
    month_branch,
    alter_list,
    return_interp=False,
    adviser=True,
    n_examples=2,
):
    user = autogen.UserProxyAgent(
        name="User",
        code_execution_config=False,
        is_termination_msg=termination_msg,
        human_input_mode="NEVER",
        default_auto_reply="TERMINATE",
    )
    interpreter_agent = autogen.AssistantAgent(
        name="Hexagram_Interpreter",
        system_message=open("../system_prompts/interpreter.md").read(),
        llm_config=llm_config,
    )
    adviser_agent = autogen.AssistantAgent(
        name="Adviser",
        system_message=open("../system_prompts/adviser.md").read(),
        llm_config=llm_config,
    )

    fortune_telling_agent = autogen.AssistantAgent(
        name="Fortune_Teller",
        system_message=open("../system_prompts/fortune_telling.md").read(),
        llm_config=llm_config,
    )

    members = [user]
    members.append(interpreter_agent)
    if not return_interp:
        members.append(fortune_telling_agent)
    if adviser:
        members.append(adviser_agent)

    group_chat = autogen.GroupChat(
        agents=members,
        messages=[],
        max_round=6,
        speaker_selection_method="round_robin",
        allow_repeat_speaker=False,
    )

    manager = autogen.GroupChatManager(groupchat=group_chat, llm_config=llm_config)

    (
        process_time,
        first_index,
        first_name,
        first_details,
        alter_list,
        second_index,
        second_name,
        second_details,
    ) = hexagram_generator.manual_process(
        first_index=first_index,
        day_stem=day_stem,
        day_branch=day_branch,
        month_branch=month_branch,
        manual_list=alter_list,
    )

    raw_gua_info = hexagram_generator.retrieve_information(
        first_index,
        second_index,
        alter_list,
        first_details,
        second_details,
    )
    formatted_gua_info, _ = hexagram_generator.format_gua_info(raw_gua_info)

    message_content = """
        Hello, masters. I came here to ask for my fortune.
        First, please allow me to provide you some examples.
        {example_text}
        Here's the information about the hexagram(s) I got:
        {hexagram_info}

        
**Here's my question: {question}**
    """
    example_text = rag.retrieve(question, n_examples)
    message = message_content.format(
        hexagram_info=formatted_gua_info, question=question, example_text=example_text
    )

    res = user.initiate_chat(
        manager,
        message=message,
    )
    return res


def marking(generated_answer, standard_answer):
    answer_prompt = """
        You are the question marker. You need to quantatively evaluate the quality of the answer generated by a LLM Agent.
        It's the result of I Ching fortune-telling, so you need to evaluate base on how related the generated answer is to the question, and how it compares to the human expert answer.
        I'll give you the standard answer, and the generated answer you need to evaluate.
        We will have a full mark of 10.
        Here's the evaluation steps:
        1. You need to break down the standard answer into several key points, and assign a score to each point, based on their importance, and they sum up to 10. 
        3. You need to evaluate the answer to see how many key points are covered. The score will be the sum of the scores of the key points covered.
        4. You need to provide a detailed explanation for each key point, to explain why it's a key point and how much score did you give at this bullet point for the generated answer.
        
        Your should finally output your evaluation in a csv table format, wrapping up with html label <table> and </table>. 
        The separator should be a $ sign. 
        Example: 
        <table>

        Key Point$Full Score$Score
        He Loves me$2$1
        Be active$3$2
        any other key points$3$0
        

        </table>

        """
    score_agent = autogen.AssistantAgent(
        name="Score",
        system_message=answer_prompt,
        llm_config=llm_config,
    )
    eval_user = autogen.UserProxyAgent(
        name="Eval_User",
        code_execution_config=False,
        is_termination_msg=termination_msg,
        human_input_mode="NEVER",
        default_auto_reply="TERMINATE",
    )
    evaluate_prompt = """
        Here's the standard answer:
        {standard_answer}
        Here's the generated answer:
        {generated_answer}
        Please evaluate the generated answer based on the standard answer.
    """
    evaluate_message = evaluate_prompt.format(
        standard_answer=standard_answer, generated_answer=generated_answer
    )
    eval_res = eval_user.initiate_chat(
        score_agent,
        message=evaluate_message,
    )
    text = eval_res.chat_history[-2]["content"]
    match = re.search(r"<table>(.*?)</table>", text, re.DOTALL)
    if match:
        table_text = match.group(1).strip()
        # Step 2: Read the CSV data into a pandas DataFrame
        df = pd.read_csv(io.StringIO(table_text), header=0, sep="$")
        df.columns = [x.strip() for x in df.columns]
        return df, text
    else:
        raise ValueError("No table found in the text.")
